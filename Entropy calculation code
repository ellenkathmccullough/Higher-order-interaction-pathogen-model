# -*- coding: utf-8 -*-
"""
Created on Sun Jul 24 16:03:13 2022

@author: ellen
"""

import numpy as np 
import time
import statistics
from scipy.stats import entropy
import matplotlib.pyplot as plt
from celluloid import Camera
from scipy.stats import norm
from matplotlib.animation import FuncAnimation

#run HOI_model and Summary_statistics first

n=10
m=10
'statistical arrays'
points=50
no_sections=10  #number of sections to divide density space up into
fT=100000
stab_len=1 #length of eco time that stability is required for
dt=0.001
tau=50
dmax=15 #pathogen gaussian mean max value 
wmax=2 #pathogen gaussian width max value
xmax=15 #tree trait max value
pert=0.1*np.array([dmax,wmax]) 
        
printing=False #to turn off the printing and hopefully make sim faster
HOI=False
tree_HOI=False
Evolution=True
tree_mutation=False #included with pathogen mutations twice as likely
tree_comp=True
tree_path_comp=True #also turns off HOIs involving pairwise path-tree interactions
abun_plots=False    #condition within abundance_plot function
trajectory_plots=False #to see how mutations evolve 
Gaussian_plots=False #plot the pathogens changing utilisation funcs
save_entropy=True
printing=False #to print number of timesteps and mutation attempts

Density_entropy=np.zeros([2,points])
Rank_entropy=np.zeros([2,points])
tic= time.perf_counter()
for i in range(points):
    'Assume trees and paths with similar and sufficiently large fitness values'
    r=np.random.uniform(100,110,(n+m))
    
    'initial tree pheontypes'
    x_tree=np.random.uniform(1,xmax,n) #tree trait values
    d=np.random.uniform(1,dmax,m) #pathogen mean values distance from 0, modelled gaussian or normal?
    w=np.random.uniform(1,wmax,m) #width of pathogen gaussians
    
    'copy initial phenotypes'
    x0_tree=np.copy(x_tree)
    d0=np.copy(d)
    w0=np.copy(w)
    
    'tree comp phenotype trait values'
    d_tree=np.random.uniform(1,10,n)
    w_tree=np.random.uniform(1,4,n)
    
    tree_pheno=([x_tree,d_tree,w_tree])
    path_pheno=([d,w])
    
    'initialise interactions matrices'
    alpha=pairwise_kernel_func(dwx,n,m)      
    beta=np.zeros([m+n,m+n,m+n]) 
    g=np.zeros([(n+m)])
    if HOI==True: 
        beta=beta_kernel_func(alpha,n,m)
        g=non_lin_func(beta,N) 
        
    'chosen logseries because it is often used in abundance modelling'
    'although starting distribution is unimportant'
    T=np.random.logseries(.6, n)/10
    P=np.random.logseries(.6, m)/10
    N=np.concatenate((T,P))
    N0=np.copy(N)
    
    N=N0
    x_tree=x0_tree
    d=d0
    w=w0
        
    'first ecological run'
    N_final,N_p,final_time=Runge_kutta_int_HOI(r,N,alpha,g,beta,dt,fT)
    if final_time==fT:
        break
        print('no steady state found') 
        
    if trajectory_plots==True:
        'trajectories'
        for j in range(len(N)):
            if j<n:        
                plt.plot(np.linspace(0,final_time,final_time+1),N_p[j,:final_time+1], label='T_'+str(j))
                plt.legend() 
            if j>=n:
                plt.plot(np.linspace(0,final_time,final_time+1),N_p[j,:final_time+1], label='P_'+str(j-n))  
                plt.title('Species density trajectories in the 1st ecological run')
                plt.legend()   
        plt.show()
     
    'mutations and subsequent ecological runs'
    if Evolution==True:
        N_pt=np.zeros([n+m,tau])
        N_pt[:,0]=N_final
        tree_trait_ev=np.zeros([n,tau])
        tree_trait_ev[:,0]=x_tree
        path_trait_ev=np.zeros([2,m,tau]) #2D path phenotype
        path_trait_ev[:,:,0]=np.array([d,w])
        
        for t in range(1,tau):
            N_final,N_p,alpha,beta,dwx,mutant, final_time=evolution_func_HOI(N_final,alpha,beta,n,m,dwx)
            N_pt[:,t]=N_final[:]
            tree_trait_ev[:,t]=tree_trait
            path_trait_ev[:,:,t]=np.array([d,w])    
            
            if trajectory_plots==True:
                'trajectories'
                for j in range(len(N)):
                    if j<n:        
                        plt.plot(np.linspace(0,final_time,final_time+1),N_p[j,:final_time+1], label='T_'+str(j))
                        plt.legend() 
                    if j>=n:
                        plt.plot(np.linspace(0,final_time,final_time+1),N_p[j,:final_time+1], label='P_'+str(j-n))  
                        plt.title('Species density trajectories in the '+str(t+1)+'th ecological run')
                        plt.legend()   
                plt.show()
                
            if Gaussian_plots==True:
                Utilisation_funcs_plot(path_traits,dmax)
            #Camera.snap() #would be good to get the animation working
        
    avg_den_ent_tree, avg_den_ent_path, avg_rank_ent_tree, avg_rank_ent_path=summary_stats(n,m,tau,N_pt,no_sections)
     
    Density_entropy[0,i]=avg_den_ent_tree
    Density_entropy[1,i]=avg_den_ent_path
    
    Rank_entropy[0,i]=avg_rank_ent_tree
    Rank_entropy[1,i] =avg_rank_ent_path
    print('Round '+str(i)+' complete')
toc = time.perf_counter()
print('Simulation length: ' +str(int(toc  - tic)/60) +' minutes')
    #Was aboue to include the element that tree mutations are present
    #but are about 10 times less common than pathogen mutations

if save_entropy==True:
    np.savetxt('Density_entropy_(tree,path).csv', Density_entropy, delimiter=',')
    np.savetxt('Rank_entropy_(tree,path).csv', Rank_entropy, delimiter=',')    

        
